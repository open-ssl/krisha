import asyncio
import json
import logging
from typing import Optional

from aiogram.enums.parse_mode import ParseMode
from redis.asyncio import Redis

from env import MAX_MESSAGE_LENGTH, REDIS_HOST, REDIS_PORT, TELEGRAM_PARSE_GROUP_DICT
from message_manager import MessageManager
from src.utils.rental_types import RentalTypes
from utils.photo_manager import PhotoManager


class NotificationHandler:
    """Handler for apartment notifications"""

    def __init__(self, message_manager: MessageManager, bot):
        """
        Initialize notification handler

        Args:
            message_manager (MessageManager): Message manager instance
            bot: Bot instance
        """
        self.redis_host = REDIS_HOST
        self.redis_port = REDIS_PORT
        self.redis: Optional[Redis] = None
        self.message_manager = message_manager
        self.bot = bot
        self.running = False
        self.photo_manager = PhotoManager()
        self.scraper_service_url = "http://localhost:8000"  # Assuming a default URL

    async def connect(self):
        """Connect to Redis"""
        try:
            self.redis = Redis(
                host=self.redis_host, port=self.redis_port, decode_responses=True
            )
            await self.redis.ping()
            logging.info("Successfully connected to Redis")
        except Exception as e:
            logging.error(f"Failed to connect to Redis: {e}")
            raise

    async def disconnect(self):
        """Disconnect from Redis"""
        if self.redis:
            await self.redis.close()

    async def start(self):
        """Start listening for notifications"""
        self.running = True
        pubsub = self.redis.pubsub()
        await pubsub.subscribe("new_apartments")

        try:
            while self.running:
                message = await pubsub.get_message(ignore_subscribe_messages=True)
                if message and message["type"] == "message":
                    data = json.loads(message["data"])
                    await self.process_notification(data)
                await asyncio.sleep(0.1)
        finally:
            await pubsub.unsubscribe("new_apartments")
            await self.disconnect()

    async def process_notification(self, data: dict):
        """
        Process notification about new apartments

        Args:
            data (dict): Notification data containing user_id, apartments and apartment_type
        """
        notification_type = data["type"]

        apartments = data["apartments"]
        apartment_type = data.get("apartment_type")

        if not apartments:
            return

        if notification_type == "user":
            user_id = data["user_id"]
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä
            if apartment_type == RentalTypes.ROOM_SHARING:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Å–µ–ª–µ–Ω–∏—è
                await self._process_room_sharing_notification(user_id, apartments)
            elif apartment_type == RentalTypes.FULL_APARTMENT:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
                await self._process_full_apartment_notification(user_id, apartments)

    async def _process_full_apartment_notification(self, user_id, apartments):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª–Ω–æ–π –∞—Ä–µ–Ω–¥–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            apartments (list): –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π –∞—Ä–µ–Ω–¥—ã
        """
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if len(apartments) == 1:
            apartment = apartments[0]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
            result_message = "üÜï –ù–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n"

            if apartment.get("city"):
                city_name = apartment["city"].capitalize()
                result_message = (
                    f"üÜï –ù–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤ –≥–æ—Ä–æ–¥–µ **{city_name}**:\n\n"
                )

            location = ""
            if apartment.get("street"):
                location = apartment["street"]

            result_message += (
                f"üè† {apartment['rooms']}-–∫–æ–º–Ω., {apartment['square']} –º¬≤\n"
            )
            if location:
                result_message += f"üìç {location}\n"

            result_message += (
                f"üí∞ *{int(apartment['price'])} —Ç–≥*\n"
                f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({apartment['url']})\n\n"
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
            photos = None
            if apartment.get("id"):
                photos = self.photo_manager.get_apartment_photos(apartment["id"])
                logging.info(
                    f"Found {len(photos)} photos for apartment {apartment['id']}"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            await self.message_manager.send_message(
                self.bot,
                user_id,
                result_message,
                parse_mode=ParseMode.MARKDOWN,
                photos=photos,
            )

            return

        # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10 —à—Ç—É–∫
        chunk_size = 10
        apartment_chunks = [
            apartments[index : index + chunk_size]
            for index in range(0, len(apartments), chunk_size)
        ]

        for chunk in apartment_chunks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ —É –ø–µ—Ä–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
            result_message = "üÜï –ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n"
            first_apt = chunk[0]
            if first_apt.get("city"):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
                city_name = first_apt["city"].capitalize()
                result_message = (
                    f"üÜï –ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤ –≥–æ—Ä–æ–¥–µ **{city_name}**:\n\n"
                )

            for apt in chunk:
                location = ""
                if apt.get("street"):
                    location = apt["street"]

                result_message += f"üè† {apt['rooms']}-–∫–æ–º–Ω., {apt['square']} –º¬≤\n"
                if location:
                    result_message += f"üìç {location}\n"

                result_message += (
                    f"üí∞ *{int(apt['price'])} —Ç–≥*\n"
                    f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({apt['url']})\n\n"
                )

            await self.message_manager.send_message(
                self.bot, user_id, result_message, parse_mode=ParseMode.MARKDOWN
            )

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(1)

    async def _process_room_sharing_notification(self, user_id, apartments):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Å–µ–ª–µ–Ω–∏–∏

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            apartments (list): –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø–æ–¥—Å–µ–ª–µ–Ω–∏—è
        """
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if len(apartments) == 1:
            apartment = apartments[0]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = "üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Å–µ–ª–µ–Ω–∏–∏ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n"
            message_text += self._format_room_sharing_text(apartment)

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
            photos = None
            if apartment.get("id"):
                photos = self.photo_manager.get_telegram_apartment_photos(
                    apartment["id"]
                )
                logging.info(
                    f"Found {len(photos)} photos for telegram apartment {apartment['id']}"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            await self.message_manager.send_message(
                self.bot,
                user_id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                photos=photos,
            )

            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –≥—Ä—É–ø–ø—ã, —É—á–∏—Ç—ã–≤–∞—è –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        current_message = (
            "üÜï –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–¥—Å–µ–ª–µ–Ω–∏–∏ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n"
        )
        current_apartments = []

        for apartment in apartments:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            apartment_text = self._format_room_sharing_text(apartment)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(current_message) + len(apartment_text) <= MAX_MESSAGE_LENGTH:
                current_message += apartment_text
                current_apartments.append(apartment)
            else:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                await self.message_manager.send_message(
                    self.bot, user_id, current_message, parse_mode=ParseMode.MARKDOWN
                )

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(1)

                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                current_message = "üÜï –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–¥—Å–µ–ª–µ–Ω–∏–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n"
                current_message += apartment_text
                current_apartments = [apartment]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if (
            current_message != "üÜï –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–¥—Å–µ–ª–µ–Ω–∏–∏:\n\n"
            and current_message != "üÜï –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–¥—Å–µ–ª–µ–Ω–∏–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n"
        ):
            await self.message_manager.send_message(
                self.bot, user_id, current_message, parse_mode=ParseMode.MARKDOWN
            )

    def _format_room_sharing_text(self, apartment):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–¥—Å–µ–ª–µ–Ω–∏–∏

        Args:
            apartment (dict): –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        price = (
            f"{apartment.get('price')} —Ç–µ–Ω–≥–µ/–º–µ—Å—è—Ü"
            if apartment.get("price")
            else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        )

        message_text = (
            f"üè¢ *–ü–æ–¥—Å–µ–ª–µ–Ω–∏–µ*\n"
            f"üí∞ *–¶–µ–Ω–∞:* {price}\n"
            f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {apartment.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        )

        if apartment.get("preferred_gender"):
            gender_text = {
                "boy": "–ú—É–∂—Å–∫–æ–π",
                "girl": "–ñ–µ–Ω—Å–∫–∏–π",
                "both": "–õ—é–±–æ–π",
                "no": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            }.get(apartment.get("preferred_gender"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            message_text += f"üë§ *–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª:* {gender_text}\n"

        if apartment.get("contact"):
            message_text += f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {apartment.get('contact')}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if apartment.get("text"):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            text = apartment.get("text")
            if len(text) > 200:  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                text = text[:197] + "..."
            message_text += f"\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{text}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        if apartment.get("channel") and apartment.get("message_id"):
            channel = apartment.get("channel")
            message_id = apartment.get("message_id")

            channel_name = TELEGRAM_PARSE_GROUP_DICT.get(channel)
            if channel_name:
                message_text += f"\n[–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ](https://t.me/{channel_name}/{message_id})\n\n"
        else:
            message_text += "\n\n"

        return message_text
