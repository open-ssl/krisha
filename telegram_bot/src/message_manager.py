import asyncio
import logging
import os
import time
from collections import deque
from typing import List, Optional

import requests
from aiogram import Bot, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import FSInputFile

from env import SCRAPER_SERVICE_URL


class MessageManager:
    """Manager for handling message sending with rate limiting and priorities"""

    def __init__(self ,admin_id: int, messages_per_second: int = 3):
        """
        Initialize message manager

        Args:
            messages_per_second (int): Maximum messages per second
            admin_id (int): Telegram ID of admin user
        """
        self.messages_per_second = messages_per_second
        self.admin_id = admin_id
        self.regular_queue = deque()
        self.admin_queue = deque()
        self.last_send_time = time.time()
        self.messages_sent = 0
        self.lock = asyncio.Lock()
        self.processing = False

    async def send_message(
        self,
        bot: Bot,
        chat_id: int,
        text: str,
        reply_markup: Optional[types.ReplyKeyboardMarkup] = None,
        parse_mode: Optional[ParseMode] = None,
        photos: Optional[List[str]] = None,
    ) -> None:
        """
        Send message with rate limiting

        Args:
            bot (Bot): Telegram bot instance
            chat_id (int): Chat ID to send message to
            text (str): Message text
            reply_markup (Optional[types.ReplyKeyboardMarkup]): Optional keyboard markup
            parse_mode (Optional[ParseMode]): Message parse mode
            photos (Optional[List[str]]): Optional list of photo paths to send with message
        """
        message_data = {
            "chat_id": chat_id,
            "text": text,
            "reply_markup": reply_markup,
            "parse_mode": parse_mode,
            "photos": photos,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å
        if chat_id == self.admin_id:
            self.admin_queue.append(message_data)
        else:
            self.regular_queue.append(message_data)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        if not self.processing:
            self.processing = True
            asyncio.create_task(self._process_queues(bot))

    async def _process_queues(self, bot: Bot) -> None:
        """Process message queues with rate limiting"""
        try:
            while self.admin_queue or self.regular_queue:
                async with self.lock:
                    current_time = time.time()

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    if current_time - self.last_send_time >= 1:
                        self.messages_sent = 0
                        self.last_send_time = current_time

                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—É–Ω–¥—ã
                    if self.messages_sent >= self.messages_per_second:
                        await asyncio.sleep(1)
                        continue

                    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
                    if self.admin_queue:
                        message_data = self.admin_queue.popleft()
                        await self._send_message(bot, **message_data)
                        self.messages_sent += 1
                    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    elif self.regular_queue:
                        message_data = self.regular_queue.popleft()
                        await self._send_message(bot, **message_data)
                        self.messages_sent += 1

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
        finally:
            self.processing = False

    async def _send_message(
        self,
        bot: Bot,
        chat_id: int,
        text: str,
        reply_markup: Optional[types.ReplyKeyboardMarkup] = None,
        parse_mode: Optional[ParseMode] = None,
        photos: Optional[List[str]] = None,
    ) -> None:
        """Actually send the message"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —Å —Ç–µ–∫—Å—Ç–æ–º
            if photos and len(photos) > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                valid_photos = [p for p in photos if os.path.exists(p)]

                if valid_photos or text.count("üè†") == 1:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –æ–¥–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=FSInputFile(valid_photos[0]),
                        caption=text
                        if len(text) <= 1024
                        else None,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏
                        reply_markup=reply_markup,
                        parse_mode=parse_mode,
                    )

                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –≤ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
                    if len(text) > 1024:
                        await bot.send_message(
                            chat_id=chat_id,
                            text=text,
                            reply_markup=reply_markup,
                            parse_mode=parse_mode,
                        )
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(
                        chat_id=chat_id,
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode,
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                )
        except Exception as e:
            if "Forbidden: bot was blocked by the user" in str(e):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                try:
                    response = requests.post(
                        f"{SCRAPER_SERVICE_URL}/users",
                        json={"user_id": chat_id, "is_active": False},
                    )
                    if not response.ok:
                        logging.error(
                            f"Failed to update user block status: {response.status_code} - {response.text}"
                        )
                except Exception as update_error:
                    logging.error(f"Error updating user block status: {update_error}")
            logging.error(f"Error sending message: {e}")
