import logging
import asyncio
from dotenv import load_dotenv

from fastapi import FastAPI
from faststream.rabbit import RabbitBroker
import uvicorn

from env import NOTIFICATION_SERVICE_PORT, RABBITMQ_URL, TELEGRAM_PARSE_GROUP_DICT

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Notification Service")


# –°–æ–∑–¥–∞–µ–º –±—Ä–æ–∫–µ—Ä RabbitMQ
broker = RabbitBroker(RABBITMQ_URL)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending_verification_requests = {}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±—Ä–æ–∫–µ—Ä –≤ bot.py
from bot import setup_broker_reference
setup_broker_reference(broker, pending_verification_requests)


@broker.subscriber("verification_request_queue")
async def handle_verification_request(request_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç scraper_service.
    
    Args:
        request_data (dict): –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ request_id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    request_id = request_data.get("request_id")
    message = request_data.get("message", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥.")
    admin_id = request_data.get("admin_id")
    
    if not request_id or not admin_id:
        logging.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {request_data}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ–∂–∏–¥–∞—é—â–∏–µ
    pending_verification_requests[request_id] = {
        "admin_id": admin_id,
        "status": "pending"
    }
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from bot import send_message_to_admin
    await send_message_to_admin(admin_id, message)
    
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å ID {request_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")


@broker.subscriber("send_channel_post")
async def handle_channel_post(request_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª.

    Args:
        request_data (dict): –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ request_id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from bot import send_message_to_admin

    community_id = request_data["community_id"]
    apartments = request_data["apartments"]
    apartment_type = request_data["apartment_type"]

    apartments_amount = len(apartments)
    if apartments_amount > 2:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
        apartments = apartments[:2]
        apartments_amount = apartments_amount - 2

    if apartment_type == "full_apartment":
        city_name = ""
        first_apt = apartments[0]
        if first_apt.get("city"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
            city_name = first_apt["city"].capitalize()

        result_message = "–ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!\n\nüÜï –ñ–∏–ª—å—ë —Ü–µ–ª–∏–∫–æ–º\n"
        if city_name:
            result_message += f"üèôÔ∏è –ì–æ—Ä–æ–¥: #{city_name}\n"

        if first_apt.get("price"):
            price1 = first_apt.get("price")
            price = int(price1)
            if len(apartments) == 2:
                second_apt = apartments[1]
                price = min([int(second_apt.get("price")), price])

            result_message += f"üí∞ –¶–µ–Ω–∞: #–æ—Ç{int(price)}\n"

        result_message += "\n"

        for apt in apartments:
            location = ""
            if apt.get("street"):
                location = apt["street"]

            result_message += f"üè† {apt['rooms']}-–∫–æ–º–Ω., {apt['square']} –º¬≤\n"
            if location:
                result_message += f"üìç {location}\n"

            result_message += (
                f"üí∞ *{int(apt['price'])} —Ç–≥*\n"
                f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({apt['url']})\n\n"
            )

    else:
        result_message = "–ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!\n\nüè¢ –ü–æ–¥—Å–µ–ª–µ–Ω–∏–µ\n"

        city_name = ""
        first_apt = apartments[0]
        if first_apt.get("city"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
            city_name = first_apt["city"].capitalize()

        if city_name:
            result_message += f"üèôÔ∏è –ì–æ—Ä–æ–¥: #{city_name}\n"

        if first_apt.get("price"):
            price1 = first_apt.get("price")
            price = int(price1)
            if len(apartments) == 2:
                second_apt = apartments[1]
                price = min([int(second_apt.get("price")), price])

            result_message += f"üí∞ –¶–µ–Ω–∞: #–æ—Ç{int(price)}\n"

        if first_apt.get("preferred_gender"):
            gender_text = {
                "boy": "–ú—É–∂—Å–∫–æ–π",
                "girl": "–ñ–µ–Ω—Å–∫–∏–π",
                "both": "–õ—é–±–æ–π",
                "no": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            }.get(first_apt.get("preferred_gender"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            result_message += f"üë§ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª: {gender_text}\n"

        result_message += "\n"

        for apt in apartments:
            price = (
                f"{apt.get('price')} —Ç–µ–Ω–≥–µ/–º–µ—Å—è—Ü"
                if apt.get("price")
                else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            )

            result_message += (
                f"üí∞ *–¶–µ–Ω–∞:* {price}\n"
                f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {apt.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            )
            if apt.get("preferred_gender"):
                gender_text = {
                    "boy": "–ú—É–∂—Å–∫–æ–π",
                    "girl": "–ñ–µ–Ω—Å–∫–∏–π",
                    "both": "–õ—é–±–æ–π",
                    "no": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                }.get(apt.get("preferred_gender"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                result_message += f"üë§ *–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª:* {gender_text}\n"

            if apt.get("contact"):
                result_message += f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {apt.get('contact')}\n"

            if apt.get("text"):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                text = apt.get("text")
                if len(text) > 200:  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                    text = text[:197] + "..."
                result_message += f"\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{text}\n"

            if apt.get("channel") and apt.get("message_id"):
                channel = apt.get("channel")
                message_id = apt.get("message_id")

                channel_name = TELEGRAM_PARSE_GROUP_DICT.get(channel)
                if channel_name:
                    result_message += f"\n[–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ](https://t.me/{channel_name}/{message_id})\n\n"
            else:
                result_message += "\n\n"

    if apartments_amount > 1:
        result_message += f"–ü–æ —Ñ–∏–ª—å—Ç—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ *{apartments_amount}* –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n\n"

    result_message += f"–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º:"
    result_message += f"\nüöÄüöÄüöÄ[–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä](https://t.me/rent_service_kz_bot)"

    await send_message_to_admin(community_id, result_message)
    await asyncio.sleep(1)

    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª")


@app.on_event("startup")
async def startup_event():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from bot import setup_bot, start_bot_polling
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    setup_bot()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–æ–∫–µ—Ä
    await broker.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.create_task(start_bot_polling())
    
    logging.info("Notification service started successfully")


@app.on_event("shutdown")
async def shutdown_event():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–æ–∫–µ—Ä
    await broker.close()
    
    logging.info("Notification service stopped")


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=NOTIFICATION_SERVICE_PORT)
